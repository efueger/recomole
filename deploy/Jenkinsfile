#! groovy

nextAction = ""
marathonTokenProd = 'search_marathon_token_prod'

pipeline {
    agent { label "devel8" }
    parameters {
	string(name: 'DOCKER_IMAGE_VERSION',
	       defaultValue: '',
	       description: 'The version of the dockerimage to deploy')
    }
    stages {
	stage("setup environment") {
	    steps {
		sh """
                   virtualenv -p /usr/bin/python3 env
                   . env/bin/activate
                   pip install git+https://github.com/DBCDK/mesos-tools.git
                   """
	    }
	}
	stage("build marathon file") {
	    steps {
		withCredentials([string(credentialsId: 'lowell_db_connection_string', variable: 'LOWELL_DB_URL'),
				 string(credentialsId: 'recommender_models_db_connection_string', variable: 'RECMOD_DB_URL')]) {
		    sh """
                       . env/bin/activate
                       cd deploy
                       cp marathon.json.template marathon-staging.json
                       cp marathon.json.template marathon-prod.json
                       """
                    substituteInFile('REPLACE_APPLICATION_DOMAIN', 'staging', 'staging')
                    substituteInFile('REPLACE_VERSION', params.DOCKER_IMAGE_VERSION, 'staging')
                    substituteInFile('REPLACE_EXTERNAL_LABEL', 'staging.recomole.mcp1-proxy.dbc.dk', 'staging')
                    substituteInFile('REPLACE_NUM_INSTANCES', 1, 'staging')
                    substituteInFile('REPLACE_LOWELL_DB_URL', $LOWELL_DB_URL, 'staging')
                    substituteInFile('REPLACE_RECMOD_DB_URL', $RECMOD_DB_URL, 'staging')

		    substituteInFile('REPLACE_APPLICATION_DOMAIN', 'staging', 'prod')
                    substituteInFile('REPLACE_VERSION', params.DOCKER_IMAGE_VERSION, 'prod')
                    substituteInFile('REPLACE_EXTERNAL_LABEL', 'recomole.mcp1-proxy.dbc.dk', 'prod')
                    substituteInFile('REPLACE_NUM_INSTANCES', 3, 'prod')
                    substituteInFile('REPLACE_LOWELL_DB_URL', $LOWELL_DB_URL, 'prod')
                    substituteInFile('REPLACE_RECMOD_DB_URL', $RECMOD_DB_URL, 'prod')
		}
	    }
	}
	stage("deploy to marathon (staging)") {
	    steps {
		withCredentials([string(credentialsId: marathonTokenProd, variable: 'TOKEN')]) {
		    sh """
                       . env/bin/activate
                       cd deploy
                       marathon-deployer -b https://mcp1.dbc.dk:8443 -a $TOKEN deploy marathon-staging.json
                       """
		}
	    }
	}
	stage("Manual acc.test") {
	    steps {
		script {
		    timeout(time: 4, unit: "DAYS") {
			nextAction = input message: "", ok: "Ok", parameters:
			    [choice(choices: "Dont Deploy\nDeploy",
				    description: "Deploy to production?",
				    name: "nextAction")]
		    }
		    if (nextAction != "Deploy") {
			currentBuild.result = 'ABORTED'
			error("Aborted by user!")
		    }
		}
	    }
	}
	stage("deploy to marathon (prod)") {
	    when {
		expression {
		    nextAction == "Deploy"
		}
	    }
	    steps {
		withCredentials([string(credentialsId: marathonTokenProd, variable: 'TOKEN')]) {
		    sh """
                       . env/bin/activate
                       cd deploy
                       marathon-deployer -b https://mcp1.dbc.dk:8443 -a $TOKEN deploy marathon-prod.json
                       """
		}
	    }
	}
    }
    post {
	unstable {
	    notifyOfBuildStatus("build became unstable")
	}
	failure {
	    notifyOfBuildStatus("build failed")
	}
    }
}

def substituteInFile(key, value, type) {
    println("Substituting: [$key] -> [$value] in '$type'")
    sh """#!/bin/bash -l
          cd deploy
          sed -i -- 's/${key}/${value}/g' marathon-${type}.json
       """
}
